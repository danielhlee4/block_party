!function(){"use strict";!function(){class t{constructor(s){this.game=s.game,this.x=s.x,this.y=s.y,this.ctx=s.ctx,this.color=t.getRandomColor(t.COLORS),this.dims=t.DIMS,this.vel=0}static DIMS=50;static COLORS=["#FF0000","#00FF00","#0000FF"];static GRAVITY=5e-4;static getRandomColor(t){return t[Math.floor(Math.random()*t.length)]}draw(t){t.fillStyle=this.color,t.fillRect(this.x*this.dims,this.y*this.dims,this.dims,this.dims)}update(){const s=this.y+1;s<=this.game.dimY&&!this.game.checkCollision(this)?(this.y+=this.vel,this.vel+=t.GRAVITY):(this.vel=0,this.y=Math.floor(s-1))}animate(t){this.update(),this.draw(t)}bounds(){return{top:this.y,bottom:this.y+1}}}var s=t;class o{constructor(t,s){this.ctx=t,this.canvas=s,this.blocks=this.createMatrix(o.NUM_COLS),this.dimY=o.NUM_HEIGHT,this.addBlocks(),this.canvas.addEventListener("click",this.handleCanvasClick.bind(this))}static NUM_COLS=5;static NUM_HEIGHT=5;static DIM_X=250;static DIM_Y=250;static BG_COLOR="#708090";createMatrix(t){const s=[];for(let o=0;o<t;o++){const t=[];s.push(t)}return s}add(t,o,i){this.blocks[t].push(new s({game:this,x:o,y:i}))}addBlocks(){this.blocks.forEach(((t,s)=>{for(let t=0;t<o.NUM_HEIGHT;t++){let o=s,i=t;this.add(s,o,i)}}))}draw(t){t.clearRect(0,0,o.DIM_X,o.DIM_Y),t.fillStyle=o.BG_COLOR,t.fillRect(0,0,o.DIM_X,o.DIM_Y),this.blocks.flat().forEach((s=>{s.draw(t)}))}handleCanvasClick(t){const s=this.canvas.getBoundingClientRect(),o=t.clientX-s.left,i=t.clientY-s.top;console.log("Mouse Click Coordinates:",o,i);const e=this.findBlockAt(o,i);e&&(console.log("Clicked Block:",e),this.removeContiguousBlocks(e),this.draw(this.ctx))}findBlockAt(t,i){const e=Math.floor(t/s.DIMS),c=Math.floor(i/s.DIMS);if(e<0||e>=o.NUM_COLS||c<0||c>=o.NUM_HEIGHT)return null;for(const t of this.blocks.flat())if(t.x===e&&t.y===c)return console.log("Find Block At:",t),t;return null}removeBlock(t,o){const i=this.blocks[t];i&&i[o]&&i.splice(o,1,new s({game:this,color:"#708090"}))}removeContiguousBlocks(t){const s=[],o=new Set,i=[];for(s.push(t);s.length>0;){const e=s.pop(),c=this.getNeighbors(e);for(const i of c)o.has(i)||i.color!==t.color||(s.push(i),o.add(i));o.add(e),i.push(e)}i.length>1&&i.forEach((t=>{this.removeBlock(t.x,t.y)}))}getNeighbors(t){const s=[],o=[{dx:0,dy:-1},{dx:0,dy:1},{dx:1,dy:0},{dx:-1,dy:0}];for(const i of o){const o=t.x+i.dx,e=t.y+i.dy;if(this.validPosition(o,e)){const t=this.blocks[o][e];s.push(t)}}return s}validPosition(t,s){return t>=0&&t<o.NUM_COLS&&s>=0&&s<o.NUM_HEIGHT}animate(){this.ctx.clearRect(0,0,o.DIM_X,o.DIM_Y),this.blocks.flat().forEach((t=>{t.animate(this.ctx)})),requestAnimationFrame(this.animate.bind(this))}checkCollision(t){const s=t.x;if(t.y===this.blocks[s].length-1)return!1;const o=t.bounds(),i=this.blocks[s][t.y+1];if(i){const t=i.bounds();if(o.bottom>=t.top)return!0}return!1}}var i=o;document.addEventListener("DOMContentLoaded",(function(){const t=document.getElementById("game-canvas"),s=t.getContext("2d"),o=new i(s,t);o.animate(),window.game=o}))}()}();
//# sourceMappingURL=main.js.map