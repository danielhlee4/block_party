{"version":3,"file":"main.js","mappings":"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","sources":["webpack://01_js_blocks/./src/block.js","webpack://01_js_blocks/./src/game.js","webpack://01_js_blocks/./src/index.js"],"sourcesContent":["class Block {\n    constructor(options) {\n        this.game = options.game;\n        this.x = options.x;\n        this.y = options.y;\n        this.ctx = options.ctx\n        this.color = Block.getRandomColor(Block.COLORS);\n        this.dims = Block.DIMS;\n        this.vel = 0;\n    }\n\n    static DIMS = 50;\n    static COLORS = [\"#FF0000\", \"#00FF00\", \"#0000FF\"];\n    static GRAVITY = .0005;\n\n    static getRandomColor(arr) {\n        const randomIndex = Math.floor(Math.random() * arr.length);\n        return arr[randomIndex];\n    }\n\n    draw(ctx) {\n        ctx.fillStyle = this.color;\n        ctx.fillRect(this.x * this.dims, this.y * this.dims, this.dims, this.dims);\n    }\n\n    update() {\n        const blockBottom = this.y + 1;\n        const floor = this.game.dimY;\n        if (blockBottom <= floor && !this.game.checkCollision(this)) {\n            this.y += this.vel;\n            this.vel += Block.GRAVITY;\n        } else {\n            this.vel = 0;\n            this.y = Math.floor(blockBottom - 1);\n        }\n    }\n    \n    animate(ctx) {\n        this.update();\n        this.draw(ctx);\n    }\n\n    bounds() {\n        return {\n            top: this.y,\n            bottom: this.y + 1\n        }\n    }\n}\n\nexport default Block;","import Block from \"./block.js\";\n\nclass Game {\n    constructor(ctx, canvas) {\n        this.ctx = ctx;\n        this.canvas = canvas;\n        this.blocks = this.createMatrix(Game.NUM_COLS);\n        this.dimY = Game.NUM_HEIGHT;\n\n        this.addBlocks();\n\n        this.canvas.addEventListener('click', this.handleCanvasClick.bind(this));\n    }\n\n    static NUM_COLS = 5;\n    static NUM_HEIGHT = 5; // how many blocks high a column can stack\n    static DIM_X = 250;\n    static DIM_Y = 250;\n    static BG_COLOR = \"#708090\";\n\n    createMatrix(cols) {\n        const matrix = [];\n        for (let i = 0; i < cols; i++) {\n            const col = [];\n            matrix.push(col);\n        }\n        return matrix;\n    }\n\n    add(colIdx, x, y) {\n        this.blocks[colIdx].push(new Block({\n            game: this,\n            x: x,\n            y: y\n        }));\n    }\n\n    addBlocks() {\n        this.blocks.forEach((col, colIdx) => {\n            for (let stack = 0; stack < Game.NUM_HEIGHT; stack++) {\n                let x = colIdx;\n                let y = stack;\n                this.add(colIdx, x, y);\n            }\n        })\n    }\n\n    draw(ctx) {\n        ctx.clearRect(0, 0, Game.DIM_X, Game.DIM_Y);\n        ctx.fillStyle = Game.BG_COLOR;\n        ctx.fillRect(0, 0, Game.DIM_X, Game.DIM_Y);\n\n        this.blocks.flat().forEach((block) => {\n            block.draw(ctx);\n        })\n    }\n\n    handleCanvasClick(event) {\n        const rect = this.canvas.getBoundingClientRect();\n        const mouseX = event.clientX - rect.left;\n        const mouseY = event.clientY - rect.top;\n\n        console.log(\"Mouse Click Coordinates:\", mouseX, mouseY);\n\n        const clickedBlock = this.findBlockAt(mouseX, mouseY);\n        if (clickedBlock) {\n            console.log(\"Clicked Block:\", clickedBlock);\n            this.removeContiguousBlocks(clickedBlock);\n            this.draw(this.ctx);\n        }\n    }\n\n    findBlockAt(x, y) {\n        const colIndex = Math.floor(x / Block.DIMS);\n        const rowIndex = Math.floor(y / Block.DIMS);\n\n        if (colIndex < 0 || colIndex >= Game.NUM_COLS || rowIndex < 0 || rowIndex >= Game.NUM_HEIGHT) {\n            return null;\n        }\n\n        for (const block of this.blocks.flat()) {\n            if (block.x === colIndex && block.y === rowIndex) {\n                console.log(\"Find Block At:\", block)\n                return block;\n            }\n        }\n\n        return null;\n    }\n\n    removeBlock(x, y) {\n        const col = this.blocks[x];\n        // temporarily replacing the populated block with a placeholder\n        if (col && col[y]) {\n            col.splice(y, 1, new Block({ game: this, color: \"#708090\" }));\n        }\n    }\n\n    // Function uses DFS to remove contiguous blocks\n    removeContiguousBlocks(startBlock) {\n        const stack = [];\n        const visited = new Set();\n        const blocksToRemove = [];\n    \n        stack.push(startBlock);\n    \n        while (stack.length > 0) {\n            const block = stack.pop();\n            const neighbors = this.getNeighbors(block);\n    \n            for (const neighbor of neighbors) {\n                if (!visited.has(neighbor) && neighbor.color === startBlock.color) {\n                    stack.push(neighbor);\n                    visited.add(neighbor);\n                }\n            }\n    \n            visited.add(block);\n            blocksToRemove.push(block);\n        }\n    \n        if (blocksToRemove.length > 1) {\n            blocksToRemove.forEach(block => {\n                this.removeBlock(block.x, block.y);\n            });\n        }\n    }\n\n    getNeighbors(block) {\n        const neighbors = [];\n\n        const directions = [\n            { dx: 0, dy: -1 }, // N\n            { dx: 0, dy: 1 }, // S\n            { dx: 1, dy: 0 }, // E\n            { dx: -1, dy: 0 }, // W\n        ];\n\n        for (const dir of directions) {\n            const newX = block.x + dir.dx;\n            const newY = block.y + dir.dy;\n\n            if (this.validPosition(newX, newY)) {\n                const neighbor = this.blocks[newX][newY];\n                neighbors.push(neighbor);\n            }\n        }\n\n        return neighbors;\n    }\n\n    validPosition(x, y) {\n        return x >= 0 && x < Game.NUM_COLS && y >= 0 && y < Game.NUM_HEIGHT;\n    }\n\n    animate() {\n        this.ctx.clearRect (0, 0, Game.DIM_X, Game.DIM_Y);\n        this.blocks.flat().forEach((block) => {\n            block.animate(this.ctx);\n        });\n\n        requestAnimationFrame(this.animate.bind(this));\n    }\n\n    checkCollision(block) {\n        const colIdx = block.x;\n\n        if (block.y === this.blocks[colIdx].length - 1) {\n            return false;\n        }\n\n        const currentBlockBounds = block.bounds();\n        const blocksInSameCol = this.blocks[colIdx];\n\n        const lowerNeighbor = blocksInSameCol[block.y + 1];\n\n        if (lowerNeighbor) {\n            const lowerNeighborBounds = lowerNeighbor.bounds();\n\n            if (currentBlockBounds.bottom >= lowerNeighborBounds.top) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n\nexport default Game;","// Imports go here\nimport Block from \"./block.js\";\nimport Game from \"./game.js\"\n\ndocument.addEventListener(\"DOMContentLoaded\",\nfunction() {\n    const canvas = document.getElementById(\"game-canvas\");\n    const ctx = canvas.getContext(\"2d\");\n\n    const game = new Game(ctx, canvas);\n\n    game.animate()\n    // game.draw(ctx);\n    window.game = game;\n});"],"names":["Block","constructor","options","this","game","x","y","ctx","color","getRandomColor","COLORS","dims","DIMS","vel","static","arr","Math","floor","random","length","draw","fillStyle","fillRect","update","blockBottom","dimY","checkCollision","GRAVITY","animate","bounds","top","bottom","Game","canvas","blocks","createMatrix","NUM_COLS","NUM_HEIGHT","addBlocks","addEventListener","handleCanvasClick","bind","cols","matrix","i","col","push","add","colIdx","forEach","stack","clearRect","DIM_X","DIM_Y","BG_COLOR","flat","block","event","rect","getBoundingClientRect","mouseX","clientX","left","mouseY","clientY","console","log","clickedBlock","findBlockAt","removeContiguousBlocks","colIndex","rowIndex","removeBlock","splice","startBlock","visited","Set","blocksToRemove","pop","neighbors","getNeighbors","neighbor","has","directions","dx","dy","dir","newX","newY","validPosition","requestAnimationFrame","currentBlockBounds","lowerNeighbor","lowerNeighborBounds","document","getElementById","getContext","window"],"sourceRoot":""}